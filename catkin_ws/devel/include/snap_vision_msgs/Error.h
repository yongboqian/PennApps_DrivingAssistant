// Generated by gencpp from file snap_vision_msgs/Error.msg
// DO NOT EDIT!


#ifndef SNAP_VISION_MSGS_MESSAGE_ERROR_H
#define SNAP_VISION_MSGS_MESSAGE_ERROR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snap_vision_msgs
{
template <class ContainerAllocator>
struct Error_
{
  typedef Error_<ContainerAllocator> Type;

  Error_()
    : err_code(0)
    , err_str()  {
    }
  Error_(const ContainerAllocator& _alloc)
    : err_code(0)
    , err_str(_alloc)  {
    }



   typedef uint16_t _err_code_type;
  _err_code_type err_code;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _err_str_type;
  _err_str_type err_str;


    enum { E_OK = 0u };
     enum { E_MODEL_NOT_UNLOADED = 1u };
     enum { E_MODEL_NOT_LOADED = 2u };
     enum { E_DETECTOR_NOT_FOUND = 4u };
     enum { E_MODEL_NOT_FOUND = 8u };
     enum { E_FILE_NOT_FOUND = 16u };
     enum { E_STUB = 65534u };
     enum { E_UNKNOWN_ERROR = 65535u };
 

  typedef boost::shared_ptr< ::snap_vision_msgs::Error_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snap_vision_msgs::Error_<ContainerAllocator> const> ConstPtr;

}; // struct Error_

typedef ::snap_vision_msgs::Error_<std::allocator<void> > Error;

typedef boost::shared_ptr< ::snap_vision_msgs::Error > ErrorPtr;
typedef boost::shared_ptr< ::snap_vision_msgs::Error const> ErrorConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snap_vision_msgs::Error_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snap_vision_msgs::Error_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace snap_vision_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'snap_vision_msgs': ['/home/yongbo/Documents/PennApps/catkin_ws/src/snap_vision_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::snap_vision_msgs::Error_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snap_vision_msgs::Error_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snap_vision_msgs::Error_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snap_vision_msgs::Error_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snap_vision_msgs::Error_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snap_vision_msgs::Error_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snap_vision_msgs::Error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "667beeea1e0d9ded84d28c9cfb3fe0d4";
  }

  static const char* value(const ::snap_vision_msgs::Error_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x667beeea1e0d9dedULL;
  static const uint64_t static_value2 = 0x84d28c9cfb3fe0d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::snap_vision_msgs::Error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snap_vision_msgs/Error";
  }

  static const char* value(const ::snap_vision_msgs::Error_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snap_vision_msgs::Error_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Language independent enum constants\n\
uint16 E_OK                    = 0\n\
uint16 E_MODEL_NOT_UNLOADED    = 1\n\
uint16 E_MODEL_NOT_LOADED      = 2\n\
uint16 E_DETECTOR_NOT_FOUND    = 4\n\
uint16 E_MODEL_NOT_FOUND       = 8\n\
uint16 E_FILE_NOT_FOUND        = 16\n\
uint16 E_STUB                  = 65534\n\
uint16 E_UNKNOWN_ERROR         = 65535\n\
\n\
uint16  err_code\n\
string err_str\n\
";
  }

  static const char* value(const ::snap_vision_msgs::Error_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snap_vision_msgs::Error_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.err_code);
      stream.next(m.err_str);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Error_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snap_vision_msgs::Error_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snap_vision_msgs::Error_<ContainerAllocator>& v)
  {
    s << indent << "err_code: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.err_code);
    s << indent << "err_str: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.err_str);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAP_VISION_MSGS_MESSAGE_ERROR_H
