# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snap_vision_msgs/Error.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Error(genpy.Message):
  _md5sum = "667beeea1e0d9ded84d28c9cfb3fe0d4"
  _type = "snap_vision_msgs/Error"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Language independent enum constants
uint16 E_OK                    = 0
uint16 E_MODEL_NOT_UNLOADED    = 1
uint16 E_MODEL_NOT_LOADED      = 2
uint16 E_DETECTOR_NOT_FOUND    = 4
uint16 E_MODEL_NOT_FOUND       = 8
uint16 E_FILE_NOT_FOUND        = 16
uint16 E_STUB                  = 65534
uint16 E_UNKNOWN_ERROR         = 65535

uint16  err_code
string err_str

"""
  # Pseudo-constants
  E_OK = 0
  E_MODEL_NOT_UNLOADED = 1
  E_MODEL_NOT_LOADED = 2
  E_DETECTOR_NOT_FOUND = 4
  E_MODEL_NOT_FOUND = 8
  E_FILE_NOT_FOUND = 16
  E_STUB = 65534
  E_UNKNOWN_ERROR = 65535

  __slots__ = ['err_code','err_str']
  _slot_types = ['uint16','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       err_code,err_str

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Error, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.err_code is None:
        self.err_code = 0
      if self.err_str is None:
        self.err_str = ''
    else:
      self.err_code = 0
      self.err_str = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_H.pack(self.err_code))
      _x = self.err_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 2
      (self.err_code,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.err_str = str[start:end].decode('utf-8')
      else:
        self.err_str = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_H.pack(self.err_code))
      _x = self.err_str
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 2
      (self.err_code,) = _struct_H.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.err_str = str[start:end].decode('utf-8')
      else:
        self.err_str = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_H = struct.Struct("<H")
